buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.14'
	}
}

plugins {
	id 'java'
	id "idea"
	id 'org.springframework.boot' version '2.5.5'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id "com.google.protobuf" version '0.8.14'
}

apply plugin: 'com.google.protobuf'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

group = "com.galvao"
version = "dev"
sourceCompatibility = 11
targetCompatibility = 11

ext {
	springCloudVersion = '2020.0.3'
	grpcVersion = '1.25.0'
	protobufVersion = '3.18.1'
	lombokVersion = '1.18.20'
	mapstructVersion = '1.4.2.Final'
	testcontainersVersion = '1.16.0'
	mockitoVersion = '3.12.4'
}

repositories {
	mavenLocal()
	mavenCentral()
	maven {
		url 'https://repo.spring.io/milestone'
	}
	maven {
		url 'https://packages.confluent.io/maven'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'

	implementation 'io.grpc:grpc-stub:1.41.0'

	compile('net.devh:grpc-server-spring-boot-starter:2.12.0.RELEASE')

	implementation 'com.google.protobuf:protobuf-java'
	implementation 'io.confluent:kafka-streams-protobuf-serde:5.5.0'

	implementation 'org.springframework.kafka:spring-kafka'
	implementation 'org.apache.kafka:kafka-streams'

	runtimeOnly 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core:7.14.1'

	implementation 'org.apache.commons:commons-lang3:3.12.0'

	// runtimeOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

	compileOnly ("org.projectlombok:lombok:${lombokVersion}")
	annotationProcessor ("org.projectlombok:lombok:${lombokVersion}")
	implementation("org.mapstruct:mapstruct:${mapstructVersion}")
	annotationProcessor("org.mapstruct:mapstruct-processor:${mapstructVersion}")

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.kafka:spring-kafka-test:2.7.6'
	testImplementation 'org.testcontainers:kafka'
	testImplementation 'org.testcontainers:junit-jupiter'
	testImplementation "org.testcontainers:cockroachdb"
	testImplementation "org.mockito:mockito-core:${mockitoVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
		mavenBom "io.grpc:grpc-bom:${grpcVersion}"
		mavenBom "com.google.protobuf:protobuf-bom:${protobufVersion}"
		mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
	}
}

subprojects {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	tasks.withType(JavaCompile) {
		sourceCompatibility = "1.8"
		targetCompatibility = "1.8"
	}
}

protobuf {
	generatedFilesBaseDir = "generated-sources/"
	protoc {
		artifact = "com.google.protobuf:protoc:3.18.1"
	}
	plugins {
		grpc {
			artifact = 'io.grpc:protoc-gen-grpc-java:1.41.0'
		}
	}
	generateProtoTasks.generatedFilesBaseDir = 'generated-sources/'
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

clean {
	delete protobuf.generatedFilesBaseDir
}

idea {
	module {
		sourceDirs += file("generated-sources/")
	}
}

test {
	useJUnitPlatform()
}