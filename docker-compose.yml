version: '3.5'

services:

  # To bootstrap a cockroach db
  # Run built-in sql client:
  #   docker-compose exec cockroachdb ./cockroach sql --insecure
  # Run in CLI:
  #   CREATE DATABASE wallet;
  #   CREATE USER app_user;
  #   GRANT ALL ON DATABASE wallet TO app_user;
  #   SHOW USERS;
  cockroachdb:
    image: cockroachdb/cockroach:latest-v20.2
    ports:
      - "26257:26257"
      - "8070:8080"
    command: start-single-node --insecure

  zookeeper:
    image: confluentinc/cp-zookeeper:latest-ubi8
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - backend

  # add the entry "127.0.0.1    kafka" to your /etc/hosts file
  # docker-compose exec kafka kafka-topics --list --zookeeper zookeeper:2181
  # docker-compose exec kafka kafka-topics --delete --zookeeper zookeeper:2181 --topic <TOPIC-NAME>
  kafka:
    image: confluentinc/cp-kafka:latest-ubi8
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_MIN_INSYNC_REPLICAS: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_LOG_RETENTION_HOURS: -1
      KAFKA_MESSAGE_MAX_BYTES: 6291456
    depends_on:
      - zookeeper
    networks:
      - backend

  schema-registry:
    image: confluentinc/cp-schema-registry:latest-ubi8
    hostname: schema-registry
    ports:
      - "8089:8089"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: zookeeper:2181
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8089
    depends_on:
      - kafka
    networks:
      - backend

  schema-registry-ui:
    image: landoop/schema-registry-ui:latest
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8089/
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS: GET,POST,PUT,OPTIONS
      SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN: '*'
      PROXY: "true"
    depends_on:
      - schema-registry
    networks:
      - backend

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:latest-ubi8
    ports:
      - "9093:9093"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: "PLAINTEXT://kafka:9092"
      KAFKA_REST_LISTENERS: http://0.0.0.0:9093
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8089
      KAFKA_REST_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_REST_HOST_NAME: "localhost"
      KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS: "GET,POST,PUT,DELETE,OPTIONS"
      KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN: "http://localhost:9094"
    depends_on:
      - schema-registry
    networks:
      - backend

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:latest
    ports:
      - "9094:9094"
    environment:
      KAFKA_REST_PROXY_URL: http://localhost:9093
      PORT: 9094
    depends_on:
      - kafka-rest-proxy
    networks:
      - backend

  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    command: ["ksql-server-start", "ksql-server.properties"]
    depends_on:
      - kafka
      - schema-registry
    ports:
      - "8088:8088"
    working_dir: /etc/ksqldb-server
    volumes:
      - ./files/ksqldb-server:/etc/ksqldb-server
    networks:
      - backend

  # To bootstrap a ksqldb schema
  # Log into the CLI by running:
  #   docker-compose exec ksqldb-cli ksql http://ksqldb-server:8088
  # Run in CLI:
  #   run script init-db.sql;
  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    depends_on:
      - kafka
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true
    working_dir: /etc/ksqldb-server
    volumes:
      - ./files/ksqldb-server:/etc/ksqldb-server
    networks:
      - backend

networks:
  backend:
